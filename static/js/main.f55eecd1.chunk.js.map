{"version":3,"sources":["Components/Card.js","res/resume.pdf","Components/About.js","Components/Gallery.js","Components/ProjectPage.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","to","route","class","src","alt","title","About","id","href","icon","faGithub","size","faEnvelope","Resume","target","rel","download","faFile","gallery","img","link","Gallery","map","item","style","textDecoration","color","RTXTracer","width","height","fontSize","PathTracer","LegendOfZelda","AnimeNetwork","TimeSeries","P2PNetwork","VoxelEngine","TimeTracker","ASCIIChess","Projects","App","basename","process","path","project","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f55eecd1.chunk.js","sourcesContent":["import \"./Card.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport function Card(props) {\r\n  return (\r\n    <div className=\"project\">\r\n      <Link to={props.route} class=\"project-title\">\r\n        <img src={props.src} className=\"project-image\" alt=\"project screenshot\"/>\r\n        <p>{props.title}</p>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/resume.dc21e434.pdf\";","import \"./About.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGithub, faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faEnvelope, faFile } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Resume from \"../res/resume.pdf\";\r\n\r\nexport function About(props) {\r\n  return (\r\n    <div id=\"about\">\r\n      <br />\r\n      <br />\r\n      <div class=\"left\">\r\n        <img src=\"https://imgur.com/emSOqKS.png\" alt=\"pfp\" />\r\n        <nav id=\"icon-list\">\r\n          <a href=\"https://github.com/varunm100\" class=\"icon\">\r\n            <FontAwesomeIcon icon={faGithub} size=\"2x\" />\r\n          </a>\r\n          <a href=\"mailto:varunm100@gmail.com\" class=\"icon\">\r\n            <FontAwesomeIcon icon={faEnvelope} size=\"2x\" />\r\n          </a>\r\n          {/* <a\r\n            href=\"https://www.linkedin.com/in/varun-munagala-367b4a110/\"\r\n            class=\"icon\"\r\n          >\r\n            <FontAwesomeIcon icon={faLinkedin} size=\"2x\" />\r\n          </a> */}\r\n          <a\r\n            href={Resume}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n            download\r\n            class=\"icon\"\r\n          >\r\n            <FontAwesomeIcon icon={faFile} size=\"2x\" />\r\n          </a>\r\n        </nav>\r\n      </div>\r\n      <div>\r\n        <div id=\"about-title\">About</div>\r\n        {/* <br />\r\n        <br /> */}\r\n        <p id=\"about-desc\">\r\n          Computers are cool :)\r\n          <br />\r\n          <br />\r\n          Email: varunm100 AT gmail.com -{\" \"}\r\n          <a href={Resume} target=\"_blank\" rel=\"noreferrer\" download>\r\n            Resume/CV\r\n          </a>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./Gallery.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst gallery = [\r\n  {\r\n    img: \"https://imgur.com/EdsvBsc.png\",\r\n    link: \"/pathtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/ssvXosx.png\",\r\n    link: \"/pathtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/2pzpEeL.png\",\r\n    link: \"/pathtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/sML1E4Q.png\",\r\n    link: \"/pathtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/oitWXBm.png\",\r\n    link: \"/pathtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/OW6wzsw.png\",\r\n    link: \"/pathtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/BHLWq9T.png\",\r\n    link: \"/pathtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/TI91UWk.png\",\r\n    link: \"/rtxtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/O5YGU4I.png\",\r\n    link: \"/rtxtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/jb1QRuk.png\",\r\n    link: \"/rtxtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/VT9N1rz.png\",\r\n    link: \"/rtxtracer\",\r\n  },\r\n  {\r\n    img: \"https://imgur.com/eaK8IXf.png\",\r\n    link: \"/rtxtracer\",\r\n  },\r\n];\r\n\r\nexport function Gallery(props) {\r\n  return (\r\n    <div>\r\n      {gallery.map((item) => {\r\n        return (\r\n          <div>\r\n            <Link to={item.link} style={{ textDecoration: \"none\", color: \"black\" }}>\r\n              <img src={item.img} alt={item.alt} className=\"gallery-image\" />\r\n            </Link>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import \"./ProjectPage.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport function RTXTracer(props) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Vulkan RTX Ray Tracer</h1>\r\n      <img\r\n        src=\"https://imgur.com/VT9N1rz.png\"\r\n        alt=\"screenshot\"\r\n        style={{ width: \"100%\", height: \"auto\" }}\r\n        class=\"center\"\r\n      />\r\n      <h3 className=\"subheading\">1-minute Summary</h3>\r\n      <p>\r\n        This ray tracer was a hobby project I worked on over the summer of 2020,\r\n        and the goal of this project was to make a complete physically-based GPU\r\n        renderer. I call it a ray tracer because people seem to be more familiar\r\n        with that term, but what it really is, is a hardware-accelerated\r\n        uni-directional forward NEE path tracer.\r\n      </p>\r\n      <p>I implemented, </p>\r\n      <ul>\r\n        <li>Cook-torrance brdf</li>\r\n        <li>Direct light sampling/Area Lights</li>\r\n        <li>Tungsten Scene Loader</li>\r\n        <li>HW Acceleration with Vulkan Ray Tracing Extensions</li>\r\n        <li>Uni-directionl forward rays</li>\r\n      </ul>\r\n      <p style={{ fontSize: \"1.25em\" }}>\r\n        <a\r\n          href=\"https://github.com/varunm100/Pathtracer-Vulkan\"\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          Github{\" \"}\r\n        </a>\r\n        |\r\n        <Link to=\"/gallery\" style={{ textDecoration: \"none\" }}>\r\n          {\" \"}\r\n          Render Gallery\r\n        </Link>\r\n      </p>\r\n      <h3 className=\"subheading\">Backstory</h3>\r\n      <p>\r\n        This project was initially supposed to be a regular deferred renderer,\r\n        but I later decided to make it use ray tracing after hearing about the\r\n        horrors of shadow mapping. I had a gaming rig with an RTX card and\r\n        wanted to utilize that as well. After doing some research, I found that\r\n        the only way to do this was to either use the Vulkan ray-tracing\r\n        extension or DXR. After much consideration, I went with the Vulkan route\r\n        because I had planned to learn Vulkan anyway some time ago. This\r\n        combined with the fact that Vulkan was cross-platform made it seem like\r\n        it was the overall better choice. Over the next months of September and\r\n        October, I would make a couple prototype engines before eventually\r\n        working my way up to an engine such as this one. After getting the basic\r\n        unidirectional path tracer working, I got tied up in another project and\r\n        put this one on hold. I am hopeful that I will revisit this and get a\r\n        chance to implement bi-directional rays, photon mapping, transmittance\r\n        BSDF, homogeneous media, and environment maps sometime in the future.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function PathTracer(props) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Path Tracer</h1>\r\n      <img\r\n        src=\"https://imgur.com/EdsvBsc.png\"\r\n        alt=\"screenshot\"\r\n        style={{ width: \"100%\", height: \"auto\" }}\r\n        class=\"center\"\r\n      />\r\n      <h3 className=\"subheading\">Overview</h3>\r\n      <p>\r\n        This was a project I did for AP CS, we were given a lot of freedom for\r\n        what we could do. It just had to be in processing and use\r\n        objects/classes somehow. And I thought making a path tracer would be a\r\n        fun project. This was not supposed to be super robust, and I just wanted\r\n        something that looked decent, so a simple demo would suffice.\r\n      </p>\r\n      <p>\r\n        Since I wanted to keep things simple, I decided to hard-code everything\r\n        into the fragment shader, so there was no scene-loading, and it could\r\n        only render spheres because they are generally easier to calculate\r\n        intersections for.\r\n      </p>\r\n      <p style={{ fontSize: \"1.25em\" }}>\r\n        <a\r\n          href=\"https://github.com/twangcs2021/PathTracer-Processing\"\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          Github{\" \"}\r\n        </a>\r\n        |\r\n        <Link to=\"/gallery\" style={{ textDecoration: \"none\" }}>\r\n          {\" \"}\r\n          Render Gallery\r\n        </Link>\r\n      </p>\r\n      <h3 className=\"subheading\">Interesting Bugs I Ran Into:</h3>\r\n      <ul>\r\n        <li>\r\n          I ran into a distortion bug because my fragment shader coordinates\r\n          were all between -1 and 1, but my camera expected coordinates between\r\n          0 to 1. I don't have any screenshots of it, but the entire scene was\r\n          shifted down and to the left.\r\n        </li>\r\n        <li>\r\n          My random function always returned zero. And since monte-carlo\r\n          integration requires quasi-random sampling, it produced these strange\r\n          artifacts\r\n        </li>\r\n        <img\r\n          src=\"https://imgur.com/3T0cYjY.png\"\r\n        alt=\"screenshot\"\r\n          style={{ width: \"100%\", height: \"auto\" }}\r\n        />\r\n        <img\r\n          src=\"https://imgur.com/XATF8dh.png\"\r\n        alt=\"screenshot\"\r\n          style={{ width: \"100%\", height: \"auto\" }}\r\n        />\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\nexport function LegendOfZelda(props) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Legend Of Zelda Clone</h1>\r\n      <img\r\n        src=\"https://user-images.githubusercontent.com/19439575/34623893-1390d66c-f279-11e7-9d2c-4bc7c80c8168.gif\"\r\n        alt=\"screenshot\"\r\n        style={{ width: \"100%\", height: \"auto\" }}\r\n        class=\"center\"\r\n      />\r\n      <h3 className=\"subheading\">1-minute Summary</h3>\r\n      <p>\r\n        I used the XNA/Monogame framework in C# to build this game. It is a\r\n        mini-game I made that used all the original sprites and soundtracks from\r\n        the original 1986 action-adventure game The Legend of Zelda. It is a\r\n        2-player combat game where the goal is the deplete the life points of\r\n        the other player. Each player starts with a throwable wooden sword and\r\n        melee weapon that they can use to hit the opponent and deplete their\r\n        life points.\r\n      </p>\r\n      <p style={{ fontSize: \"1.25em\" }}>\r\n        <a\r\n          href=\"https://github.com/varunm100/Legend-of-Zelda-Clone\"\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          Github\r\n        </a>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function AnimeNetwork(props) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Anime Reccomendation Network</h1>\r\n      <h3 className=\"subheading\">1-minute Summary</h3>\r\n      <p>\r\n        This was built using electron and react. It scrapes anime\r\n        recommendations from myanimelist.net and visually represents them in a\r\n        graph. I originally created this as a little project for myself to\r\n        search for anime more easily. I got inspired by Google's page rank\r\n        algorithm and wondered if I could make something similar, but instead of\r\n        indexing web pages, it indexes anime and creates a recommendation chart\r\n        for people to easily find similar shows.\r\n      </p>\r\n      <p style={{ fontSize: \"1.25em\" }}>\r\n        <a\r\n          href=\"https://github.com/varunm100/Anime-Network\"\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          Github\r\n        </a>\r\n      </p>\r\n      <img\r\n        src=\"https://camo.githubusercontent.com/b70bb9ab5f26067e0be71dfb6825d3bc0a856422647cc40fbb1b94505d10ffc8/68747470733a2f2f6d656469612e646973636f72646170702e6e65742f6174746163686d656e74732f3736323830323838363935373539363638322f3830343531313838373538303036393933382f756e6b6e6f776e2e706e67\"\r\n        alt=\"screenshot\"\r\n        style={{ width: \"900x\", height: \"auto\" }}\r\n        className=\"center\"\r\n      />\r\n      <img\r\n        src=\"https://camo.githubusercontent.com/f6074dc8bd04c9dd5171ac407b6f6445101c2b087214bac2c2562ba3c079f5ed/68747470733a2f2f6d656469612e646973636f72646170702e6e65742f6174746163686d656e74732f3736323830323838363935373539363638322f3830343531313935363533343432373635382f756e6b6e6f776e2e706e67\"\r\n        alt=\"screenshot\"\r\n        style={{ width: \"900px\", height: \"auto\" }}\r\n        className=\"center\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TimeSeries(props) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Time Series Prediction</h1>\r\n      <h3 className=\"subheading\">Overview</h3>\r\n      <p>\r\n        During my time at Zebi, a small big data/blockchain startup, I was\r\n        tasked with predicting future sales for a client based on previous\r\n        historical data. I tried out several time-series algorithms, but\r\n        eventually ended-up choosing to go with an LSTM RNN using Keras, which\r\n        was the only machine learning-based algorithm I tested and it generally\r\n        produced more reasonable results than all of the other models.\r\n      </p>\r\n      <p style={{ fontSize: \"1.25em\" }}>\r\n        <a\r\n          href=\"https://github.com/varunm100/ResourcePrediction\"\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          Github\r\n        </a>\r\n      </p>\r\n      <p style={{ fontSize: \"1.25em\" }}>Methods Implemented</p>\r\n      <ul>\r\n        <li>Polynomial Regression</li>\r\n        <li>Quadratic Smoothing</li>\r\n        <li>ARIMA Time Series</li>\r\n        <li>FB Prophet</li>\r\n        <li>LSTM RNN (Recurrent Neural Network)</li>\r\n      </ul>\r\n      <p style={{ fontSize: \"1.25em\" }}>\r\n        Results from RNN (With differing parameters)\r\n      </p>\r\n      <img\r\n        src=\"https://imgur.com/pq4S1QW.png\"\r\n        alt=\"screenshot\"\r\n        style={{ width: \"100%\", height: \"auto\" }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function P2PNetwork(props) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Peer To Peer Network</h1>\r\n      <h3 className=\"subheading\">1-minute Summary</h3>\r\n      <p>\r\n        At Zebi, a small big data/blockchain startup, I was tasked with making a\r\n        prototype P2P network. I impelemented it using raw java sockets as a\r\n        proof-of-concept. This was a prototype that was eventually made into a\r\n        private blockchain. One main challenge that I had to tackle was making\r\n        sure it was able to take requests from multiple peers at the same time,\r\n        and so it had to be fully multi-threaded. I decided to go the lock-free\r\n        apporach and use java atomics.\r\n      </p>\r\n      <p style={{ fontSize: \"1.25em\" }}>\r\n        <a\r\n          href=\"https://github.com/varunm100/P2P-Network\"\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          Github\r\n        </a>\r\n      </p>\r\n      <p style={{ fontSize: \"1.25em\" }}>Features I Had to Implement</p>\r\n      <ul>\r\n        <li>Fully multi-threaded and uses Java Sockets</li>\r\n        <li>Ability to distribute data throughout the network</li>\r\n        <li>\r\n          Ability to ping messagges back and forth between 2 targeted nodes\r\n        </li>\r\n        <li>Ability to host a poll and securely get consensus</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function VoxelEngine(props) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Voxel Maze</h1>\r\n      <h3 className=\"subheading\">1-minute Summary</h3>\r\n      <p>\r\n        A maze-type voxel game that uses 3d perlin noise and was built using\r\n        OpenGL and C++. This was another one of my hobby prototype engines that\r\n        eventually turned into a voxel maze-type game. I had originally planned\r\n        to turn this into a Minecraft clone with added features, but had trouble\r\n        finalizing the terrain algorithm and never ended up finishing it. I want\r\n        to eventually improve on this by using Vulkan and maybe adding some\r\n        terrain and ray tracing to make it look much better.\r\n      </p>\r\n      <p style={{ fontSize: \"1.25em\" }}>\r\n        <a\r\n          href=\"https://github.com/varunm100/VoxelEngine\"\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          Github\r\n        </a>\r\n      </p>\r\n      <img src=\"https://imgur.com/2VJWZmR.png\" alt=\"screenshot\" class=\"full-width\" />\r\n      <img src=\"https://imgur.com/ZTnIiCH.png\" alt=\"screenshot\" class=\"full-width\" />\r\n      <img src=\"https://imgur.com/73PWdv5.png\" alt=\"screenshot\" class=\"full-width\" />\r\n      <img src=\"https://imgur.com/E8e9tyF.png\" alt=\"screenshot\" class=\"full-width\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TimeTracker(props) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Screen Time Monitor</h1>\r\n      <h3 className=\"subheading\">Overview</h3>\r\n      <p>\r\n        This is a time tracking application designed to visialize computer\r\n        activity on a timeline and provide computer usage statistics. This was\r\n        built using react and electron. I mainly chose electron, because it\r\n        seemed like the easiest way to get started with a cross-platform desktop\r\n        application.\r\n      </p>\r\n      <h3 className=\"subheading\">Backstory</h3>\r\n      <p>\r\n        With the increasing number of applications designed to lure you into\r\n        their short-term driven dopamine feedback loop, I found myself spending\r\n        endless hours browsing through Reddit and watching random videos on\r\n        YouTube. It became so much harder to do anything productive. To really\r\n        capitalize the time I spend on my computer I wanted to create an\r\n        application to track my screen time. The program is structured to record\r\n        activity based on the title of the active window and categorizes it into\r\n        several different groups based on a user-defined config file with a list\r\n        of categories and a set of match terms.\r\n      </p>\r\n      <p>Chosen Categories for Myself: </p>\r\n      <ul>\r\n        <li>YouTube</li>\r\n        <li>Netflix</li>\r\n        <li>Twitch</li>\r\n        <li>Reddit</li>\r\n        <li>Anime</li>\r\n        <li>Web Browsing</li>\r\n        <li>Discord</li>\r\n        <li>Spotify</li>\r\n        <li>Emacs</li>\r\n        <li>VS (vscode or Visual Studio)</li>\r\n        <li>Idle</li>\r\n        <li>Other</li>\r\n      </ul>\r\n      <p style={{ fontSize: \"1.25em\" }}>\r\n        <a\r\n          href=\"https://github.com/varunm100/screen-time-monitor\"\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          Github\r\n        </a>\r\n      </p>\r\n      <img src=\"https://imgur.com/E03lmBl.png\" alt=\"screenshot\" class=\"full-width\" />\r\n      <img src=\"https://imgur.com/uQIQsh2.png\" alt=\"screenshot\"class=\"full-width\" />\r\n      <img src=\"https://imgur.com/Fl1Ekcy.png\" alt=\"screenshot\" class=\"full-width\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function ASCIIChess(props) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">ASCII Chess</h1>\r\n      <h3 className=\"subheading\">Overview</h3>\r\n      <p>\r\n        This emulates the classic game of chess with a grid of ascii characters.\r\n        This was written in C++ and only works in a BASH shell\r\n        that supports the colors. I personally love the vintage aesthetic that\r\n        comes with terminal-based games, so I decided to make my own.\r\n      </p>\r\n      <p style={{ fontSize: \"1.25em\" }}>\r\n        <a\r\n          href=\"https://github.com/varunm100/ChessEngineC\"\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          Github\r\n        </a>\r\n      </p>\r\n      <img src=\"https://imgur.com/TC6YcQ7.png\" alt=\"screenshot\" class=\"full-width\" />\r\n    </div>\r\n  );\r\n}\r\n","import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport { Card } from \"./Components/Card\";\r\nimport { About } from \"./Components/About\";\r\nimport { Gallery } from \"./Components/Gallery\";\r\nimport {\r\n  RTXTracer,\r\n  PathTracer,\r\n  LegendOfZelda,\r\n  AnimeNetwork,\r\n  TimeSeries,\r\n  P2PNetwork,\r\n  VoxelEngine,\r\n  TimeTracker,\r\n  ASCIIChess,\r\n} from \"./Components/ProjectPage\";\r\n\r\nconst Projects = [\r\n  {\r\n    src:\r\n      \"https://camo.githubusercontent.com/98e70bf351dbaaaf4fc176019396754a22f68920b1df271e1069b4a1f61791ce/68747470733a2f2f6d656469612e646973636f72646170702e6e65742f6174746163686d656e74732f3634303633313235393733303534323630322f3738323338313338363430343436323633322f756e6b6e6f776e2e706e67\",\r\n    title: \"RTX Vulkan Ray Tracer\",\r\n    route: \"/rtxtracer\",\r\n  },\r\n  {\r\n    src:\r\n      \"https://camo.githubusercontent.com/42c496372b8339202023aa570dbe1c8bb34b72ede3177abaaa6c39a3f1007c5a/68747470733a2f2f6d656469612e646973636f72646170702e6e65742f6174746163686d656e74732f3634303633313235393733303534323630322f3738303533393232373232313030303234332f756e6b6e6f776e2e706e67\",\r\n    title: \"Path Tracer\",\r\n    route: \"/pathtracer\",\r\n  },\r\n  {\r\n    src: \"https://imgur.com/2VJWZmR.png\",\r\n    title: \"Voxel Engine\",\r\n    route: \"/voxelengine\",\r\n  },\r\n  {\r\n    src: \"https://imgur.com/Fl1Ekcy.png\",\r\n    title: \"Screen Time Tracker\",\r\n    route: \"/timetracker\",\r\n  },\r\n  {\r\n    src: \"https://imgur.com/pq4S1QW.png\",\r\n    title: \"Time Series Prediction\",\r\n    route: \"/timeseries\",\r\n  },\r\n  {\r\n    src:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3f/P2P-network.svg/1024px-P2P-network.svg.png\",\r\n    title: \"Peer-to-Peer Network\",\r\n    route: \"/p2pnetwork\",\r\n  },\r\n  {\r\n    src:\r\n      \"https://user-images.githubusercontent.com/19439575/34623893-1390d66c-f279-11e7-9d2c-4bc7c80c8168.gif\",\r\n    title: \"Legend of Zelda Clone\",\r\n    route: \"/legendofzelda\",\r\n  },\r\n  {\r\n    src:\r\n      \"https://camo.githubusercontent.com/b70bb9ab5f26067e0be71dfb6825d3bc0a856422647cc40fbb1b94505d10ffc8/68747470733a2f2f6d656469612e646973636f72646170702e6e65742f6174746163686d656e74732f3736323830323838363935373539363638322f3830343531313838373538303036393933382f756e6b6e6f776e2e706e67\",\r\n    title: \"Anime Network\",\r\n    route: \"/animenetwork\",\r\n  },\r\n  {\r\n    src: \"https://i.imgur.com/TC6YcQ7.png\",\r\n    title: \"ASCII Chess\",\r\n    route: \"/asciichess\",\r\n  },\r\n];\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"content\">\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <header className=\"header\">\r\n          <a href=\"index.html\" className=\"header-title\">\r\n            Varun Munagala\r\n          </a>\r\n          <nav className=\"main-nav\">\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/\" style={{ textDecoration: \"none\", color: \"#263333\"}}>\r\n                  Portfolio\r\n                </Link>\r\n              </li>\r\n              <li>\r\n                <Link\r\n                  to=\"/gallery\"\r\n                  style={{ textDecoration: \"none\", color: \"#263333\"}}\r\n                >\r\n                  Render Gallery\r\n                </Link>\r\n              </li>\r\n              <li>\r\n                <Link\r\n                  to=\"/about\"\r\n                  style={{ textDecoration: \"none\", color: \"#263333\" }}\r\n                >\r\n                  About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n          <br />\r\n          <br />\r\n          <br />\r\n        </header>\r\n        <body>\r\n          <section id=\"main-content\">\r\n            <Switch>\r\n              <Route path=\"/gallery\">\r\n                <Gallery />\r\n              </Route>\r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/rtxtracer\">\r\n                <RTXTracer />\r\n              </Route>\r\n              <Route path=\"/pathtracer\">\r\n                <PathTracer />\r\n              </Route>\r\n              <Route path=\"/legendofzelda\">\r\n                <LegendOfZelda />\r\n              </Route>\r\n              <Route path=\"/animenetwork\">\r\n                <AnimeNetwork />\r\n              </Route>\r\n              <Route path=\"/timeseries\">\r\n                <TimeSeries />\r\n              </Route>\r\n              <Route path=\"/p2pnetwork\">\r\n                <P2PNetwork />\r\n              </Route>\r\n              <Route path=\"/voxelengine\">\r\n                <VoxelEngine />\r\n              </Route>\r\n              <Route path=\"/timetracker\">\r\n                <TimeTracker />\r\n              </Route>\r\n              <Route path=\"/asciichess\">\r\n                <ASCIIChess />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                {Projects.map((project) => {\r\n                  return (\r\n                    <Card\r\n                      src={project.src}\r\n                      title={project.title}\r\n                      route={project.route}\r\n                    />\r\n                  );\r\n                })}\r\n              </Route>\r\n            </Switch>\r\n          </section>\r\n        </body>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}